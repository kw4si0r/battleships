openapi: 3.0.1
info:
  description: "API for battleship game. See rules and more on [wikipedia](https://en.wikipedia.org/wiki/Battleship_(game))"
  version: "0.0.1"
  title: "Battleship API"
  contact:
    email: "kw4si0r@gmail.com"
  license:
    name: "MIT license"
    url: "https://github.com/kw4si0r/battleships/blob/main/LICENSE"
paths:
  /game:
    post:
      tags:
        - "game"
      summary: "join to the game"
      description: "join to game and schedule to start at `startAt`"
      operationId: "joinGame"
      requestBody:
        description: Game configuration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        "200":
          description: "Ok"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ship'
        "409":
          description: "Conflict"
  /game/{id}/shot:
    post:
      tags:
        - "game"
      summary: "shot"
      description: "Shot"
      operationId: "shot"
      parameters:
        - in: path
          description: "game id"
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Position
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Position'
        required: true
      responses:
        "200":
          description: "Ok. Hit."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShotResult'

        "404":
          description: "Not found. Missed."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShotResult'
    get:
      tags:
        - "game"
      summary: "get all shots"
      operationId: getAllShots
      parameters:
        - in: path
          description: "game id"
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "get all shots"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Position'
  /game/{id}/ship:
    get:
      tags:
        - "game"
      summary: "find ships by criteria"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "find"
      parameters:
        - in: path
          description: game id
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: destroyed
          description: destroyed or not
          required: true
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ship'
        "404":
          description: "Not found"

components:
  schemas:
    Game:
      type: "object"
      required:
        - "id"
        - "size"
      properties:
        id:
          type: "string"
          example: "c59d7c88-97f3-11ec-b909-0242ac120002"
        size:
          type: integer
          default: 10
          description: "grid size, default 10x10"
        startAt:
          type: "string"
          format: "date-time"
          example: "2022-01-01T00:00:00Z"
          description: "start immediately if null"
    Position:
      type: "object"
      properties:
        x:
          type: integer
          minimum: 0
        y:
          type: integer
          minimum: 0
        hit:
          type: boolean
          default: false
    Ship:
      type: "object"
      properties:
        destroyed:
          type: boolean
          default: false
        locaction:
          type: array
          items:
            $ref: "#/components/schemas/Position"
        type:
          type: integer
          enum:
            - 5
            - 4
            - 3
            - 2
            - 1
          x-enum-varnames:
            - Carrier
            - Battleship
            - Cruiser
            - Submarine
            - Destroyer
    ShotResult:
      type: "string"
      enum:
        - missed
        - hit
        - destroyed
        - all_destroyed

